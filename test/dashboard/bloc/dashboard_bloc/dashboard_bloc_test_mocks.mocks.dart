// Mocks generated by Mockito 5.4.4 from annotations
// in wemolo_parking/test/dashboard/bloc/dashboard_bloc/dashboard_bloc_test_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:wemolo_parking/screens/dashboard/data/model/request/request_body_parking/request_body_parking.dart'
    as _i7;
import 'package:wemolo_parking/screens/dashboard/data/model/response/response_body_distincts/response_body_distincts.dart'
    as _i8;
import 'package:wemolo_parking/screens/dashboard/data/model/response/response_body_parking/response_body_parking.dart'
    as _i6;
import 'package:wemolo_parking/screens/dashboard/domain/repositories/dashboard_repository.dart'
    as _i2;
import 'package:wemolo_parking/screens/dashboard/domain/usecases/get_parking_data_usecase.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDashboardRepository_0 extends _i1.SmartFake
    implements _i2.DashboardRepository {
  _FakeDashboardRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetParkingDataUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetParkingDataUseCase extends _i1.Mock
    implements _i4.GetParkingDataUseCase {
  MockGetParkingDataUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DashboardRepository get dashboardRepository => (super.noSuchMethod(
        Invocation.getter(#dashboardRepository),
        returnValue: _FakeDashboardRepository_0(
          this,
          Invocation.getter(#dashboardRepository),
        ),
      ) as _i2.DashboardRepository);

  @override
  _i5.Future<_i3.Either<dynamic, _i6.ResponseBodyParking>> getParkingData(
          _i7.RequestBodyParking? requestBodyParking) =>
      (super.noSuchMethod(
        Invocation.method(
          #getParkingData,
          [requestBodyParking],
        ),
        returnValue:
            _i5.Future<_i3.Either<dynamic, _i6.ResponseBodyParking>>.value(
                _FakeEither_1<dynamic, _i6.ResponseBodyParking>(
          this,
          Invocation.method(
            #getParkingData,
            [requestBodyParking],
          ),
        )),
      ) as _i5.Future<_i3.Either<dynamic, _i6.ResponseBodyParking>>);

  @override
  _i5.Future<_i3.Either<dynamic, _i8.ResponseBodyDistincts>>
      getDistinctData() => (super.noSuchMethod(
            Invocation.method(
              #getDistinctData,
              [],
            ),
            returnValue: _i5
                .Future<_i3.Either<dynamic, _i8.ResponseBodyDistincts>>.value(
                _FakeEither_1<dynamic, _i8.ResponseBodyDistincts>(
              this,
              Invocation.method(
                #getDistinctData,
                [],
              ),
            )),
          ) as _i5.Future<_i3.Either<dynamic, _i8.ResponseBodyDistincts>>);
}
